<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Developers Blog]]></title>
  <link href="http://paulbowler.github.io/atom.xml" rel="self"/>
  <link href="http://paulbowler.github.io/"/>
  <updated>2013-10-24T12:40:37+01:00</updated>
  <id>http://paulbowler.github.io/</id>
  <author>
    <name><![CDATA[Paul Bowler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sorting maps by multiple keys in Clojure]]></title>
    <link href="http://paulbowler.github.io/blog/2013/10/24/sorting-maps-by-multiple-keys-in-clojure/"/>
    <updated>2013-10-24T11:34:00+01:00</updated>
    <id>http://paulbowler.github.io/blog/2013/10/24/sorting-maps-by-multiple-keys-in-clojure</id>
    <content type="html"><![CDATA[<p>As keywords are also Clojure functions, it is very simple to sort maps by a specific key:</p>

<figure class='code'><figcaption><span>Sorting map by single key </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="nb">sort-by </span><span class="ss">:score</span> <span class="p">[</span>
</span><span class='line'>             <span class="p">{</span><span class="ss">:name</span> <span class="s">&quot;Fred&quot;</span> <span class="ss">:age</span> <span class="mi">10</span> <span class="ss">:score</span> <span class="mi">9</span> <span class="ss">:tuition</span> <span class="nv">true</span><span class="p">}</span>
</span><span class='line'>             <span class="p">{</span><span class="ss">:name</span> <span class="s">&quot;Jim&quot;</span>  <span class="ss">:age</span> <span class="mi">15</span> <span class="ss">:score</span> <span class="mi">7</span> <span class="ss">:tuition</span> <span class="nv">true</span><span class="p">}</span>
</span><span class='line'>             <span class="p">{</span><span class="ss">:name</span> <span class="s">&quot;Jane&quot;</span> <span class="ss">:age</span> <span class="mi">9</span> <span class="ss">:score</span> <span class="mi">8</span>  <span class="ss">:tuition</span> <span class="nv">false</span><span class="p">}])</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">({</span><span class="ss">:name</span> <span class="s">&quot;Jim&quot;</span>, <span class="ss">:age</span> <span class="mi">15</span>, <span class="ss">:score</span> <span class="mi">7</span><span class="p">}</span>
</span><span class='line'> <span class="p">{</span><span class="ss">:name</span> <span class="s">&quot;Jane&quot;</span>, <span class="ss">:age</span> <span class="mi">9</span>, <span class="ss">:score</span> <span class="mi">8</span><span class="p">}</span>
</span><span class='line'> <span class="p">{</span><span class="ss">:name</span> <span class="s">&quot;Fred&quot;</span>, <span class="ss">:age</span> <span class="mi">10</span>, <span class="ss">:score</span> <span class="mi">9</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, what if we want to sort a map by multiple keys, such as :age and then :score? We can&rsquo;t just
add the second keyword to sort-by.</p>

<p>What we need is a new function that can take many comparator functions and apply them each in turn.
Fortunately for us, a function already exists, namely &lsquo;juxt.</p>

<p>Rewriting the function with juxt we now get:</p>

<figure class='code'><figcaption><span>Sorting map by multiple keys</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="nb">sort-by </span><span class="p">(</span><span class="nf">juxt</span> <span class="ss">:score</span> <span class="ss">:age</span><span class="p">)</span> <span class="p">[</span>
</span><span class='line'>             <span class="p">{</span><span class="ss">:name</span> <span class="s">&quot;Fred&quot;</span> <span class="ss">:age</span> <span class="mi">10</span> <span class="ss">:score</span> <span class="mi">9</span> <span class="ss">:tuition</span> <span class="nv">true</span><span class="p">}</span>
</span><span class='line'>             <span class="p">{</span><span class="ss">:name</span> <span class="s">&quot;Jim&quot;</span>  <span class="ss">:age</span> <span class="mi">15</span> <span class="ss">:score</span> <span class="mi">7</span> <span class="ss">:tuition</span> <span class="nv">true</span><span class="p">}</span>
</span><span class='line'>             <span class="p">{</span><span class="ss">:name</span> <span class="s">&quot;Jane&quot;</span> <span class="ss">:age</span> <span class="mi">9</span> <span class="ss">:score</span> <span class="mi">8</span>  <span class="ss">:tuition</span> <span class="nv">false</span><span class="p">}])</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">({</span><span class="ss">:name</span> <span class="s">&quot;Jim&quot;</span>, <span class="ss">:age</span> <span class="mi">15</span>, <span class="ss">:score</span> <span class="mi">7</span>, <span class="ss">:tuition</span> <span class="nv">true</span><span class="p">}</span>
</span><span class='line'> <span class="p">{</span><span class="ss">:name</span> <span class="s">&quot;Jane&quot;</span>, <span class="ss">:age</span> <span class="mi">9</span>, <span class="ss">:score</span> <span class="mi">8</span>, <span class="ss">:tuition</span> <span class="nv">false</span><span class="p">}</span>
</span><span class='line'> <span class="p">{</span><span class="ss">:name</span> <span class="s">&quot;Fred&quot;</span>, <span class="ss">:age</span> <span class="mi">10</span>, <span class="ss">:score</span> <span class="mi">9</span>, <span class="ss">:tuition</span> <span class="nv">true</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Great! But now what if we want to also rank by those students who take extra tuition? You&rsquo;d expect the
following to work, but it orders the boolean false-true rather than true-false:</p>

<figure class='code'><figcaption><span>Sorting map by multiple keys and boolean</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="nb">sort-by </span><span class="p">(</span><span class="nf">juxt</span> <span class="ss">:tuition</span> <span class="ss">:score</span> <span class="ss">:age</span><span class="p">)</span> <span class="p">[</span>
</span><span class='line'>             <span class="p">{</span><span class="ss">:name</span> <span class="s">&quot;Fred&quot;</span> <span class="ss">:age</span> <span class="mi">10</span> <span class="ss">:score</span> <span class="mi">9</span> <span class="ss">:tuition</span> <span class="nv">true</span><span class="p">}</span>
</span><span class='line'>             <span class="p">{</span><span class="ss">:name</span> <span class="s">&quot;Jim&quot;</span>  <span class="ss">:age</span> <span class="mi">15</span> <span class="ss">:score</span> <span class="mi">7</span> <span class="ss">:tuition</span> <span class="nv">true</span><span class="p">}</span>
</span><span class='line'>             <span class="p">{</span><span class="ss">:name</span> <span class="s">&quot;Jane&quot;</span> <span class="ss">:age</span> <span class="mi">9</span> <span class="ss">:score</span> <span class="mi">8</span>  <span class="ss">:tuition</span> <span class="nv">false</span><span class="p">}])</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
