<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: merge | Functional Adventures]]></title>
  <link href="http://paulbowler.github.io/blog/categories/merge/atom.xml" rel="self"/>
  <link href="http://paulbowler.github.io/"/>
  <updated>2013-10-31T14:51:17+00:00</updated>
  <id>http://paulbowler.github.io/</id>
  <author>
    <name><![CDATA[Paul Bowler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Merging sequences of maps by key values]]></title>
    <link href="http://paulbowler.github.io/blog/2013/10/25/merging-maps-by-key-values-in-clojure/"/>
    <updated>2013-10-25T15:43:00+01:00</updated>
    <id>http://paulbowler.github.io/blog/2013/10/25/merging-maps-by-key-values-in-clojure</id>
    <content type="html"><![CDATA[<p>A school has data about its students split in different database and needs to combine them into one to supply an important report to the governors. The databases have a common key of student :name, and are:</p>

<p>Class data:
``` clj Class Data
(def class-data [</p>

<pre><code>     {:name "Tom Thumb",  :class :twyford}
     {:name "Bob Smith",  :class :marwell}
     {:name "Jim Brown",  :class :owslebury}
     {:name "Kate Jones", :class :littleton}
     {:name "Helen Pain", :class :alresford}])
</code></pre>

<p>```</p>

<p>&hellip;house data:
``` clj House Data
(def house-data [</p>

<pre><code>     {:name "Tom Thumb",  :house :byron}
     {:name "Bob Smith",  :house :shelley}
     {:name "Jim Brown",  :house :auden}
     {:name "Kate Jones", :house :byron}
     {:name "Helen Pain", :house :blake}])
</code></pre>

<p>```</p>

<p>&hellip;and school meal data:</p>

<p>``` clj School Meal Data
(def meal-data [</p>

<pre><code>     {:name "Tom Thumb",  :meal :vegetarian}
     {:name "Bob Smith",  :meal :lunchbox}
     {:name "Jim Brown",  :meal :hot}
     {:name "Kate Jones", :meal :lunchbox}
     {:name "Helen Pain", :meal :hot}])
</code></pre>

<p>```</p>

<p>Combining maps using the &lsquo;merge&rsquo; function seems the obvious place to start, but this will only merge a sequence of maps, not
sequences of sequences of maps as we have here.</p>

<p>Using a bit of hammock-driven thinking time and functional decomposition, we can break a possible solution down to:</p>

<pre><code>1 Find all the unique values in :name across the databases
2 For each unique :name, get the maps containing that key/value pair from each database
3 Merge the maps into new maps
4 Combine into a single sequence
</code></pre>

<p>To find the unique key values we can map the required :key across all databases, then remove duplicates:</p>

<p><code>clj Unique key-values across databases
(defn unique-key-values [key colls] (distinct (flatten (map #(map key %) colls))))
</code></p>

<p>Calling this with a key of :name and a collection of our databases:
<code>clj
(unique-key-values :name [class-data house-data meal-data])
</code>
gives us:
<code>clj Unique key values
("Tom Thumb" "Bob Smith" "Jim Brown" "Kate Jones" "Helen Pain")
</code>
For each :name value we now need to merge all the maps from each database that contain this key/value combination:
<code>clj Merge maps containing key/value pair
(defn merge-key-val [key val colls]
  (apply merge (filter #(= (key %) val)(apply concat colls))))
</code>
For :name as the key and &lsquo;Tom Thumb&rsquo; as the value, this gives us results:
<code>
{:meal :vegetarian, :house :byron, :name "Tom Thumb", :class :twyford}
</code>
Excellent! Now we need to bring it all together apping the &lsquo;merge-key-val&rsquo; function over all :name values:
<code>clj Final code
(defn key-merge [key &amp; colls]
  (map #(merge-key-val key % colls) (unique-keys key colls)))
</code>
We can now get the final merged database:
<code>clj
(key-merge :name class-data house-data meal-data)
</code>
<code>clj
({:meal :vegetarian, :house :byron, :name "Tom Thumb", :class :twyford}
 {:meal :lunchbox, :house :shelley, :name "Bob Smith", :class :marwell}
 {:meal :hot, :house :auden, :name "Jim Brown", :class :owslebury}
 {:meal :lunchbox, :house :byron, :name "Kate Jones", :class :littleton}
 {:meal :hot, :house :blake, :name "Helen Pain", :class :alresford})
</code>
Using functional decomposition we have created a simple solution to the problem that is generic enough to be used again.</p>
]]></content>
  </entry>
  
</feed>
