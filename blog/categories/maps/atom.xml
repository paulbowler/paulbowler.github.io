<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: maps | Developers Blog]]></title>
  <link href="http://paulbowler.github.io/blog/categories/maps/atom.xml" rel="self"/>
  <link href="http://paulbowler.github.io/"/>
  <updated>2013-10-24T12:33:18+01:00</updated>
  <id>http://paulbowler.github.io/</id>
  <author>
    <name><![CDATA[Paul Bowler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sorting maps by multiple keys in Clojure]]></title>
    <link href="http://paulbowler.github.io/blog/2013/10/24/sorting-maps-by-multiple-keys-in-clojure/"/>
    <updated>2013-10-24T11:34:00+01:00</updated>
    <id>http://paulbowler.github.io/blog/2013/10/24/sorting-maps-by-multiple-keys-in-clojure</id>
    <content type="html"><![CDATA[<p>As keywords are also Clojure functions, it is very simple to sort maps by a specific key:</p>

<p>``` clj &ldquo;Sorting map by single key&rdquo;
(sort-by :score [</p>

<pre><code>         {:name "Fred" :age 10 :score 9 :tuition true}
         {:name "Jim"  :age 15 :score 7 :tuition true}
         {:name "Jane" :age 9 :score 8  :tuition false}])
</code></pre>

<p>```
However, what if we want to sort a map by multiple keys, such as :age and then :score? We can&rsquo;t just
add the second keyword to sort-by.</p>

<p>What we need is a new function that can take many comparator functions and apply them each in turn.
Fortunately for us, a function already exists, namely &lsquo;juxt.</p>

<p>Rewriting the function with juxt we now get:</p>

<p>``` clj &ldquo;Sorting map by multiple keys&rdquo;</p>

<pre><code>         {:name "Fred" :age 10 :score 9 :tuition true}
         {:name "Jim"  :age 15 :score 7 :tuition true}
         {:name "Jane" :age 9 :score 8  :tuition false}])
</code></pre>

<p>(sort-by (juxt :score :age) [
```
Great! But now what if we want to also rank by those students who take extra tuition? You&rsquo;d expect the
following to work, but it orders the boolean false-true rather than true-false:</p>

<p>``` clj &ldquo;Sorting map by multiple keys and boolean&rdquo;
(sort-by (juxt :tuition :score :age) [</p>

<pre><code>         {:name "Fred" :age 10 :score 9 :tuition true}
         {:name "Jim"  :age 15 :score 7 :tuition true}
         {:name "Jane" :age 9 :score 8  :tuition false}])
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
