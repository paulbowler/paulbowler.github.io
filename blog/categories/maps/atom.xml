<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: maps | Functional Adventures]]></title>
  <link href="http://paulbowler.github.io/blog/categories/maps/atom.xml" rel="self"/>
  <link href="http://paulbowler.github.io/"/>
  <updated>2013-10-24T19:28:03+01:00</updated>
  <id>http://paulbowler.github.io/</id>
  <author>
    <name><![CDATA[Paul Bowler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Merging maps by key values in clojure]]></title>
    <link href="http://paulbowler.github.io/blog/2013/10/25/merging-maps-by-key-values-in-clojure/"/>
    <updated>2013-10-25T15:43:00+01:00</updated>
    <id>http://paulbowler.github.io/blog/2013/10/25/merging-maps-by-key-values-in-clojure</id>
    <content type="html"><![CDATA[<p>A school has data about its students split in different database and needs to combine them into one to supply an important report to the governors. The databases have a common key of :name, and are made up of:</p>

<p>Class data:
``` clj Class Data
(def class-data [</p>

<pre><code>     {:name "Tom Thumb",  :class :twyford}
     {:name "Bob Smith",  :class :marwell}
     {:name "Jim Brown",  :class :owslebury}
     {:name "Kate Jones", :class :littleton}
     {:name "Helen Pain", :class :alresford}])
</code></pre>

<p>```</p>

<p>&hellip;house data:
``` clj House Data
(def house-data [</p>

<pre><code>     {:name "Tom Thumb",  :house :byron}
     {:name "Bob Smith",  :house :shelley}
     {:name "Jim Brown",  :house :auden}
     {:name "Kate Jones", :house :byron}
     {:name "Helen Pain", :house :blake}])
</code></pre>

<p>```</p>

<p>&hellip;and school meal data:</p>

<p>``` clj School Meal Data
(def meal-data [</p>

<pre><code>     {:name "Tom Thumb",  :meal :vegetarian}
     {:name "Bob Smith",  :meal :lunchbox}
     {:name "Jim Brown",  :meal :hot}
     {:name "Kate Jones", :meal :lunchbox}
     {:name "Helen Pain", :meal :hot}])
</code></pre>

<p>```</p>

<p>Combining maps using the &lsquo;merge&rsquo; function seems the obvious place to start, but this will only merge sequences of maps, not
sequences of sequences of maps.</p>

<p>Using a bit of hammock-driven thinking time and functinal decomposition, we can break a possible solution down to:</p>

<pre><code>1 Find all the unique values in :name across the databases
2 For each unique :name, get the maps containing that key/value from each database
3 Merge the maps into a new maps
</code></pre>

<p>To find the unique key-values we can map the :key across all databases, then remove duplicates:</p>

<p><code>clj Unique key-values across databases
(defn unique-key-values [key colls] (distinct (flatten (map #(map key %) colls))))
</code></p>

<p>Calling this:
<code>clj
(unique-key-values :name [class-data house-data meal-data])
</code>
gives us:
<code>clj Unique key values
("Tom Thumb" "Bob Smith" "Jim Brown" "Kate Jones" "Helen Pain")
</code>
For each :name value we now need to merge all the maps from each database that contain this key/value combination:
<code>clj Merge maps where it contains :name of, say, "Tom Thumb"
(defn merge-key-val [key val colls]
  (apply merge (filter #(= (key %) val)(apply concat colls))))
</code>
For :name as the key and &lsquo;Tom Thumb&rsquo; as the value, this gives us results:
<code>
{:meal :vegetarian, :house :byron, :name "Tom Thumb", :class :twyford}
</code>
Excellent! Now we need to bring it all together apping the &lsquo;merge-key-val&rsquo; function over all :name values:
<code>clj Final code
(defn key-join [key &amp; colls]
  (map #(merge-key-val key % colls) (unique-keys key colls)))
</code>
We can now get the final merged database:
<code>clj
(key-join :name class-data house-data meal-data)
</code>
<code>clj
({:meal :vegetarian, :house :byron, :name "Tom Thumb", :class :twyford}
 {:meal :lunchbox, :house :shelley, :name "Bob Smith", :class :marwell}
 {:meal :hot, :house :auden, :name "Jim Brown", :class :owslebury}
 {:meal :lunchbox, :house :byron, :name "Kate Jones", :class :littleton}
 {:meal :hot, :house :blake, :name "Helen Pain", :class :alresford})
</code>
Using functional decomposition we have created a simple solution to the problem that is generic enough to be used again.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sorting maps by multiple keys in Clojure]]></title>
    <link href="http://paulbowler.github.io/blog/2013/10/24/sorting-maps-by-multiple-keys-in-clojure/"/>
    <updated>2013-10-24T11:34:00+01:00</updated>
    <id>http://paulbowler.github.io/blog/2013/10/24/sorting-maps-by-multiple-keys-in-clojure</id>
    <content type="html"><![CDATA[<p>Several hundred school students have taken an exam and the Headmistress wants a list of results ordered by score. Pretty simple ask.</p>

<p>Here is a representative sample of the students, their age and score as a sequence of maps:
``` clj
(def results [{:name &ldquo;Fred&rdquo; :age 10 :score 9}</p>

<pre><code>          {:name "Jim"  :age 15 :score 8}
          {:name "Bill" :age 15 :score 9}
          {:name "Emma" :age 7  :score 7}
          {:name "Jane" :age 9  :score 8}])
</code></pre>

<p>```</p>

<p>As keywords are also Clojure functions, it is very simple to sort maps by a specific key:</p>

<p><code>clj Sorting map by single key
(sort-by :score results)
</code>
<code>clj
({:name "Emma", :age 7,  :score 7}
 {:name "Jim",  :age 15, :score 8}
 {:name "Jane", :age 9,  :score 8}
 {:name "Fred", :age 10, :score 9}
 {:name "Bill", :age 15, :score 9})
</code>
This is fine, although the scores are in lowest-first order. We can fix that by reversing the sequence:</p>

<p><code>clj Reversing the order of results
(reverse (sort-by :score results))
</code>
<code>clj
({:name "Bill", :age 15, :score 9}
 {:name "Fred", :age 10, :score 9}
 {:name "Jane", :age 9,  :score 8}
 {:name "Jim",  :age 15, :score 8}
 {:name "Emma", :age 7,  :score 7})
</code>
The headmistress is happy, although now she also wants the results weighted by age so that of students with
equal marks the younger will come above the older.</p>

<p>To do this we need to be able to sort by multiple keys such as you would in a relational database using &lsquo;order by score, age&rsquo;. In clojure we can&rsquo;t just do this by adding the second keyword to sort-by. Instead, what we need is to be able to apply each sort in turn. Looking through the docs it appears that <a href="http://clojuredocs.org/clojure_core/clojure.core/juxt">juxt</a> does exactly what we need:</p>

<p><blockquote><p>Takes a set of functions and returns a fn that is the juxtaposition<br/>of those fns. The returned fn takes a variable number of args, and<br/>returns a vector containing the result of applying each fn to the<br/>args (left-to-right).</p></blockquote></p>

<p>Adding in juxt to the code gives:</p>

<p><code>clj Sorting map by multiple keys
(sort-by (juxt :score :age) results)
</code>
<code>clj
({:name "Emma", :age 7,  :score 7}
 {:name "Jane", :age 9,  :score 8}
 {:name "Jim",  :age 15, :score 8}
 {:name "Fred", :age 10, :score 9}
 {:name "Bill", :age 15, :score 9})
</code>
Unfortunately we now have both age and score going from lowest to highest. We need score ranking from highest to lowest again as we had in the previous example. To use the SQL example again, we need &lsquo;order by score <em>desc</em>, age&rsquo;. Clearly this time we can&rsquo;t just reverse the resulting sequence as student&rsquo;s ages would then be in the wrong order. Hmmm&hellip;</p>

<p>Under the covers Clojure sorts integers using a comparison of two values. This returns -1 for &lsquo;a &lt; b&rsquo;, 0 for &lsquo;a = b&rsquo; or +1 for &lsquo;a > c&rsquo;. It can then use a sort algorithm to put them all in the correct place. The comparison function itself is written in the base class, in this instance &lsquo;Integer&rsquo; which implements the &lsquo;Comparable&rsquo; interfaces &lsquo;compareTo&rsquo; method.</p>

<p>We cannot overide the &lsquo;compareTo&rsquo; method, so we have to find other creative ways. One way is to change the score value to a negative by wrapping the map &lsquo;get&rsquo; function (which is effectively what the keyword does as a function) and performing the transformation there. The scores can then be sorted in the correct order as before:</p>

<p><code>clj Reversing the score order
(sort-by (juxt #(* -1 (:score %)) :age) results)
</code>
This gives us exactly what we want:
<code>clj
({:name "Fred", :age 10, :score 9}
 {:name "Bill", :age 15, :score 9}
 {:name "Jane", :age 9,  :score 8}
 {:name "Jim",  :age 15, :score 8}
 {:name "Emma", :age 7,  :score 7})
</code>
The Headmistress is very please and she can now process the hundreds of test results in no time at all. Result!</p>
]]></content>
  </entry>
  
</feed>
